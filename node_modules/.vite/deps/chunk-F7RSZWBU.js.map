{
  "version": 3,
  "sources": ["../../@deskthing/types/dist/clients/clientData.js", "../../@deskthing/types/dist/clients/clientTransit.js", "../../@deskthing/types/dist/apps/appData.js", "../../@deskthing/types/dist/apps/appSettings.js", "../../@deskthing/types/dist/apps/appTasks.js", "../../@deskthing/types/dist/apps/appTransit.js", "../../@deskthing/types/dist/meta/logging.js", "../../@deskthing/types/dist/meta/music.js", "../../@deskthing/types/dist/meta/transit.js", "../../@deskthing/types/dist/deskthing/deskthingTransit.js", "../../@deskthing/types/dist/deskthing/mappings.js"],
  "sourcesContent": ["export var ClientConnectionMethod;\n(function (ClientConnectionMethod) {\n    ClientConnectionMethod[ClientConnectionMethod[\"Unknown\"] = 0] = \"Unknown\";\n    ClientConnectionMethod[ClientConnectionMethod[\"LAN\"] = 1] = \"LAN\";\n    ClientConnectionMethod[ClientConnectionMethod[\"Localhost\"] = 2] = \"Localhost\";\n    ClientConnectionMethod[ClientConnectionMethod[\"ADB\"] = 3] = \"ADB\";\n    ClientConnectionMethod[ClientConnectionMethod[\"NDIS\"] = 4] = \"NDIS\";\n    ClientConnectionMethod[ClientConnectionMethod[\"Bluetooth\"] = 5] = \"Bluetooth\";\n    ClientConnectionMethod[ClientConnectionMethod[\"Internet\"] = 6] = \"Internet\";\n})(ClientConnectionMethod || (ClientConnectionMethod = {}));\nexport var PlatformIDs;\n(function (PlatformIDs) {\n    PlatformIDs[\"ADB\"] = \"adb\";\n    PlatformIDs[\"WEBSOCKET\"] = \"websocket\";\n    PlatformIDs[\"BLUETOOTH\"] = \"bluetooth\";\n    PlatformIDs[\"MAIN\"] = \"main\";\n})(PlatformIDs || (PlatformIDs = {}));\nexport var ClientPlatformIDs;\n(function (ClientPlatformIDs) {\n    ClientPlatformIDs[ClientPlatformIDs[\"Unknown\"] = 0] = \"Unknown\";\n    ClientPlatformIDs[ClientPlatformIDs[\"Desktop\"] = 1] = \"Desktop\";\n    ClientPlatformIDs[ClientPlatformIDs[\"Tablet\"] = 2] = \"Tablet\";\n    ClientPlatformIDs[ClientPlatformIDs[\"Iphone\"] = 3] = \"Iphone\";\n    ClientPlatformIDs[ClientPlatformIDs[\"CarThing\"] = 4] = \"CarThing\";\n})(ClientPlatformIDs || (ClientPlatformIDs = {}));\nexport var ConnectionState;\n(function (ConnectionState) {\n    ConnectionState[ConnectionState[\"Connected\"] = 0] = \"Connected\";\n    ConnectionState[ConnectionState[\"Established\"] = 1] = \"Established\";\n    ConnectionState[ConnectionState[\"Connecting\"] = 2] = \"Connecting\";\n    ConnectionState[ConnectionState[\"Disconnecting\"] = 3] = \"Disconnecting\";\n    ConnectionState[ConnectionState[\"Disconnected\"] = 4] = \"Disconnected\";\n    ConnectionState[ConnectionState[\"Failed\"] = 5] = \"Failed\";\n})(ConnectionState || (ConnectionState = {}));\nexport var ProviderCapabilities;\n(function (ProviderCapabilities) {\n    ProviderCapabilities[ProviderCapabilities[\"CONFIGURE\"] = 0] = \"CONFIGURE\";\n    ProviderCapabilities[ProviderCapabilities[\"PING\"] = 1] = \"PING\";\n    ProviderCapabilities[ProviderCapabilities[\"COMMUNICATE\"] = 2] = \"COMMUNICATE\";\n})(ProviderCapabilities || (ProviderCapabilities = {}));\n/**\n * @module deskthing/client\n * @description\n * View mode enum used for configuring display states\n * @see {@link ClientPreferences.appTrayState}\n * @see {@link MiniplayerSettings.state}\n */\nexport var ViewMode;\n(function (ViewMode) {\n    ViewMode[\"HIDDEN\"] = \"hidden\";\n    ViewMode[\"PEEK\"] = \"peek\";\n    ViewMode[\"FULL\"] = \"full\";\n})(ViewMode || (ViewMode = {}));\n/**\n * @module deskthing/client\n * @description\n * Volume mode enum used for configuring volume control behavior\n * @see {@link ClientPreferences.volume}\n */\nexport var VolMode;\n(function (VolMode) {\n    VolMode[\"WHEEL\"] = \"wheel\";\n    VolMode[\"SLIDER\"] = \"slider\";\n    VolMode[\"BAR\"] = \"bar\";\n})(VolMode || (VolMode = {}));\n", "/**\n * You generally do not have to worry about this\n */\nexport var CLIENT_REQUESTS;\n(function (CLIENT_REQUESTS) {\n    CLIENT_REQUESTS[\"GET\"] = \"get\";\n    CLIENT_REQUESTS[\"ACTION\"] = \"action\";\n    CLIENT_REQUESTS[\"BUTTON\"] = \"button\";\n    CLIENT_REQUESTS[\"KEY\"] = \"key\";\n    CLIENT_REQUESTS[\"LOG\"] = \"log\";\n})(CLIENT_REQUESTS || (CLIENT_REQUESTS = {}));\n/**\n * You generally do not have to worry about this\n *\n */\nexport var DEVICE_CLIENT;\n(function (DEVICE_CLIENT) {\n    DEVICE_CLIENT[\"MANIFEST\"] = \"manifest\";\n    DEVICE_CLIENT[\"MUSIC\"] = \"music\";\n    DEVICE_CLIENT[\"SETTINGS\"] = \"settings\";\n    DEVICE_CLIENT[\"APPS\"] = \"apps\";\n    DEVICE_CLIENT[\"ACTION\"] = \"action\";\n    DEVICE_CLIENT[\"TIME\"] = \"time\";\n    DEVICE_CLIENT[\"ICON\"] = \"icon\";\n})(DEVICE_CLIENT || (DEVICE_CLIENT = {}));\nexport var DEVICE_DESKTHING;\n(function (DEVICE_DESKTHING) {\n    /** Triggering an action */\n    DEVICE_DESKTHING[\"ACTION\"] = \"action\";\n    /** General set payload */\n    DEVICE_DESKTHING[\"SET\"] = \"set\";\n    /** General get payload */\n    DEVICE_DESKTHING[\"GET\"] = \"get\";\n    /** Request to ping the server */\n    DEVICE_DESKTHING[\"PING\"] = \"ping\";\n    /** Response from a ping */\n    DEVICE_DESKTHING[\"PONG\"] = \"pong\";\n    /** Logging from the client */\n    DEVICE_DESKTHING[\"LOG\"] = \"log\";\n    /** Updates regarding the current view */\n    DEVICE_DESKTHING[\"VIEW\"] = \"view\";\n    /** Payloads intended for apps */\n    DEVICE_DESKTHING[\"APP_PAYLOAD\"] = \"app_payload\";\n    /** Getters / setters for the current manifest */\n    DEVICE_DESKTHING[\"MANIFEST\"] = \"manifest\";\n    /** Getters / setters for the current settings */\n    DEVICE_DESKTHING[\"SETTINGS\"] = \"settings\";\n    /** Getters / setters for the current configuration */\n    DEVICE_DESKTHING[\"CONFIG\"] = \"config\";\n})(DEVICE_DESKTHING || (DEVICE_DESKTHING = {}));\n", "/**\n * Different supported platforms for the app\n */\nexport var PlatformTypes;\n(function (PlatformTypes) {\n    PlatformTypes[\"WINDOWS\"] = \"windows\";\n    PlatformTypes[\"LINUX\"] = \"linux\";\n    PlatformTypes[\"MAC\"] = \"mac\";\n    PlatformTypes[\"MAC64\"] = \"mac64\";\n    PlatformTypes[\"MACARM\"] = \"macarm\";\n    PlatformTypes[\"ANDROID\"] = \"android\";\n    PlatformTypes[\"IOS\"] = \"ios\";\n    PlatformTypes[\"ARM64\"] = \"arm64\";\n    PlatformTypes[\"X64\"] = \"x64\";\n})(PlatformTypes || (PlatformTypes = {}));\n/**\n * For the manifest. Different types of tags that can be used to categorize apps\n */\nexport var TagTypes;\n(function (TagTypes) {\n    TagTypes[\"AUDIO_SOURCE\"] = \"audiosource\";\n    TagTypes[\"SCREEN_SAVER\"] = \"screensaver\";\n    TagTypes[\"UTILITY_ONLY\"] = \"utilityOnly\";\n    TagTypes[\"WEB_APP_ONLY\"] = \"webappOnly\";\n})(TagTypes || (TagTypes = {}));\n", "/**\n * The different types of available settings\n * @since 0.11.0\n */\nexport var SETTING_TYPES;\n(function (SETTING_TYPES) {\n    SETTING_TYPES[\"BOOLEAN\"] = \"boolean\";\n    SETTING_TYPES[\"NUMBER\"] = \"number\";\n    SETTING_TYPES[\"STRING\"] = \"string\";\n    SETTING_TYPES[\"RANGE\"] = \"range\";\n    SETTING_TYPES[\"SELECT\"] = \"select\";\n    SETTING_TYPES[\"MULTISELECT\"] = \"multiselect\";\n    SETTING_TYPES[\"LIST\"] = \"list\";\n    SETTING_TYPES[\"RANKED\"] = \"ranked\";\n    SETTING_TYPES[\"COLOR\"] = \"color\";\n    SETTING_TYPES[\"FILE\"] = \"file\";\n})(SETTING_TYPES || (SETTING_TYPES = {}));\n", "export var STEP_TYPES;\n(function (STEP_TYPES) {\n    STEP_TYPES[\"ACTION\"] = \"action\";\n    STEP_TYPES[\"SHORTCUT\"] = \"shortcut\";\n    STEP_TYPES[\"SETTING\"] = \"setting\";\n    STEP_TYPES[\"TASK\"] = \"task\";\n    STEP_TYPES[\"EXTERNAL\"] = \"external\";\n    STEP_TYPES[\"STEP\"] = \"step\";\n})(STEP_TYPES || (STEP_TYPES = {}));\n", "/**\n * Events sent from the App Server to the DeskThing Server\n */\nexport var APP_REQUESTS;\n(function (APP_REQUESTS) {\n    /**\n     * Default handler for unknown or unspecified data types.\n     * Will log a warning message about the unknown data type.\n     */\n    APP_REQUESTS[\"DEFAULT\"] = \"default\";\n    /**\n     * Retrieves data from the server. Supports multiple request types:\n     * - 'data': Gets app-specific stored data\n     * - 'config': Gets configuration (deprecated)\n     * - 'settings': Gets application settings\n     * - 'input': Requests user input via a form\n     *\n     * @remarks Use {@link DeskThing.getData}, {@link DeskThing.getConfig}, {@link DeskThing.getSettings}, or {@link DeskThing.getUserInput} instead\n     *\n     * @example\n     * DeskThing.sendData(APP_REQUESTS.GET, { request: 'settings' })\n     */\n    APP_REQUESTS[\"GET\"] = \"get\";\n    /**\n     * Sets data inside the server for your app that can be retrieved with DeskThing.getData()\n     * Data is stored persistently and can be retrieved later.\n     *\n     * @remarks Use {@link DeskThing.saveData} instead\n     *\n     * @example\n     * DeskThing.sendData(APP_REQUESTS.SET, { payload: { key: 'value' }})\n     */\n    APP_REQUESTS[\"SET\"] = \"set\";\n    /**\n     * Deletes data inside the server for your app that can be retrieved with DeskThing.getData()\n     *\n     * @remarks Use {@link DeskThing.deleteSettings} or {@link DeskThing.deleteData} instead\n     *\n     * @example\n     * DeskThing.sendData(APP_REQUESTS.DELETE, { payload: ['key1', 'key2'] }, \"settings\")\n     * DeskThing.sendData(APP_REQUESTS.DELETE, { payload: ['key1', 'key2'] }, \"data\")\n     */\n    APP_REQUESTS[\"DELETE\"] = \"delete\";\n    /**\n     * Opens a URL to a specific address on the server.\n     * This gets around any CORS issues that may occur by opening in a new window.\n     * Typically used for authentication flows.\n     *\n     * @remarks Use {@link DeskThing.openUrl} instead\n     *\n     * @example\n     * DeskThing.sendData(APP_REQUESTS.OPEN, { payload: 'https://someurl.com' })\n     */\n    APP_REQUESTS[\"OPEN\"] = \"open\";\n    /**\n     * Sends data to the front end client.\n     * Can target specific client components or send general messages.\n     * Supports sending to both the main client and specific app clients.\n     *\n     * @remarks Use {@link DeskThing.send} instead\n     *\n     * @example\n     * DeskThing.sendData(APP_REQUESTS.SEND, { type: 'someData', payload: 'value' })\n     *\n     * @example\n     * DeskThing.send({ type: 'someData', payload: 'value', clientId: '18274923402' })\n     */\n    APP_REQUESTS[\"SEND\"] = \"send\";\n    /**\n     * Sends data to another app in the system.\n     * Allows inter-app communication by specifying target app and payload.\n     * Messages are logged for debugging purposes.\n     *\n     * @remarks Use {@link DeskThing.sendDataToOtherApp} instead\n     *\n     * @example\n     * DeskThing.sendData(APP_REQUESTS.TOAPP, { request: 'spotify', payload: { type: 'get', data: 'music' }})\n     */\n    APP_REQUESTS[\"TOAPP\"] = \"toApp\";\n    /**\n     * Logs messages to the system logger.\n     * Supports multiple log levels: DEBUG, ERROR, FATAL, LOGGING, MESSAGE, WARNING\n     * Messages are tagged with the source app name.\n     *\n     * @remarks Use {@link DeskThing.log} instead\n     *\n     * @example\n     * DeskThing.sendData(APP_REQUESTS.LOG, { request: 'ERROR', payload: 'Something went wrong' })\n     */\n    APP_REQUESTS[\"LOG\"] = \"log\";\n    /**\n     * Manages key mappings in the system.\n     * Supports operations: add, remove, trigger\n     * Keys can have multiple modes and are associated with specific apps.\n     *\n     * @remarks Use {@link DeskThing.registerKeyObject} instead\n     *\n     * @example\n     * DeskThing.sendData(APP_REQUESTS.KEY, { request: 'add', payload: { id: 'myKey', modes: ['default'] }})\n     */\n    APP_REQUESTS[\"KEY\"] = \"key\";\n    /**\n     * Manages actions in the system.\n     * Supports operations: add, remove, update, run\n     * Actions can have values, icons, and version information.\n     *\n     * @remarks\n     * It is recommended to use {@link DeskThing.registerAction} instead of sending data directly.\n     *\n     * @example\n     * DeskThing.sendData(APP_REQUESTS.ACTION, { request: 'add', payload: { id: 'myAction', name: 'My Action' }})\n     */\n    APP_REQUESTS[\"ACTION\"] = \"action\";\n    /**\n     * Manages tasks in the system.\n     * Supports operations: get, update, delete, add, complete, restart, start, and end\n     *\n     * @remarks\n     * It is recommended to use {@link DeskThing.tasks.addTask} instead of sending data directly.\n     *\n     * @example\n     * DeskThing.sendData(APP_REQUESTS.TASK, { request: 'add', payload: { id: 'myAction', name: 'My Action' }})\n     */\n    APP_REQUESTS[\"TASK\"] = \"task\";\n    /**\n     * Manages actions in the system.\n     * Supports operations: get, update, delete, add, complete, restart, start, and end\n     *\n     * @remarks\n     * It is recommended to use {@link DeskThing.tasks.addStep} instead of sending data directly.\n     *\n     * @example\n     * DeskThing.sendData(APP_REQUESTS.ACTION, { request: 'add', payload: { id: 'myAction', name: 'My Action' }})\n     */\n    APP_REQUESTS[\"STEP\"] = \"step\";\n    /**\n     * Sends song data to the server\n     * Payload should be type {@link SongData}\n     *\n     * @example\n     * DeskThing.send({ type: APP_REQUESTS.SONG, request: 'add', payload: { id: 'mySong', title: 'My Song', artist: 'Artist Name' }})\n     */\n    APP_REQUESTS[\"SONG\"] = \"song\";\n    /**\n     * Sends a notification to the server\n     * Payload should be type {@link NotificationMessage}\n     *\n     * @example\n     * const result = await DeskThing.once({\n     *        type: APP_REQUESTS.MESSAGE,\n     *        request: 'send',\n     *        payload: {\n     *            id: 'myMessage',\n     *            type: \"text\",\n     *            title: 'My Message',\n     *            description: 'This is a message',\n     *            link: 'https://example.com'\n     *        }\n     *    }, { type: APP_REQUESTS.MESSAGE, request: 'myMessage' }\n     * )\n     *\n     * console.log(result.payload.response) // will log the response from the user\n     */\n    APP_REQUESTS[\"MESSAGE\"] = \"message\";\n})(APP_REQUESTS || (APP_REQUESTS = {}));\n", "export var LOGGING_LEVELS;\n(function (LOGGING_LEVELS) {\n    LOGGING_LEVELS[\"MESSAGE\"] = \"message\";\n    LOGGING_LEVELS[\"LOG\"] = \"log\";\n    LOGGING_LEVELS[\"WARN\"] = \"warning\";\n    LOGGING_LEVELS[\"ERROR\"] = \"error\";\n    LOGGING_LEVELS[\"DEBUG\"] = \"debugging\";\n    LOGGING_LEVELS[\"FATAL\"] = \"fatal\";\n})(LOGGING_LEVELS || (LOGGING_LEVELS = {}));\n", "export var SongAbilities;\n(function (SongAbilities) {\n    SongAbilities[\"LIKE\"] = \"like\";\n    SongAbilities[\"SHUFFLE\"] = \"shuffle\";\n    SongAbilities[\"REPEAT\"] = \"repeat\";\n    SongAbilities[\"PLAY\"] = \"play\";\n    SongAbilities[\"PAUSE\"] = \"pause\";\n    SongAbilities[\"STOP\"] = \"stop\";\n    SongAbilities[\"NEXT\"] = \"next\";\n    SongAbilities[\"PREVIOUS\"] = \"previous\";\n    SongAbilities[\"REWIND\"] = \"rewind\";\n    SongAbilities[\"FAST_FORWARD\"] = \"fast_forward\";\n    SongAbilities[\"CHANGE_VOLUME\"] = \"change_volume\";\n    SongAbilities[\"SET_OUTPUT\"] = \"set_output\";\n})(SongAbilities || (SongAbilities = {}));\nconst abc = {};\n/**\n * Various audio requests that will be sent to an audio source\n */\nexport var AUDIO_REQUESTS;\n(function (AUDIO_REQUESTS) {\n    AUDIO_REQUESTS[\"NEXT\"] = \"next\";\n    AUDIO_REQUESTS[\"PREVIOUS\"] = \"previous\";\n    AUDIO_REQUESTS[\"REWIND\"] = \"rewind\";\n    AUDIO_REQUESTS[\"FAST_FORWARD\"] = \"fast_forward\";\n    AUDIO_REQUESTS[\"PLAY\"] = \"play\";\n    AUDIO_REQUESTS[\"PAUSE\"] = \"pause\";\n    /** @deprecated */\n    AUDIO_REQUESTS[\"STOP\"] = \"stop\";\n    AUDIO_REQUESTS[\"SEEK\"] = \"seek\";\n    AUDIO_REQUESTS[\"LIKE\"] = \"like\";\n    AUDIO_REQUESTS[\"SONG\"] = \"song\";\n    AUDIO_REQUESTS[\"VOLUME\"] = \"volume\";\n    AUDIO_REQUESTS[\"REPEAT\"] = \"repeat\";\n    AUDIO_REQUESTS[\"SHUFFLE\"] = \"shuffle\";\n    /** Only used by the server */\n    AUDIO_REQUESTS[\"REFRESH\"] = \"refresh\";\n})(AUDIO_REQUESTS || (AUDIO_REQUESTS = {}));\n/**\n * A specific SongEvent enum for filtering only song-related events\n */\nexport var SongEvent;\n(function (SongEvent) {\n    /**\n     * request: 'song' | 'refresh'\n     */\n    SongEvent[\"GET\"] = \"get\";\n    /**\n     * request: \"next\" | \"previous\" | \"fast_forward\" | \"rewind\" | \"play\" | \"pause\" | \"stop\" | \"seek\" | \"like\" | \"volume\" | \"repeat\"\n     */\n    SongEvent[\"SET\"] = \"set\";\n})(SongEvent || (SongEvent = {}));\n", "export var TransitSources;\n(function (TransitSources) {\n    /** App Client */\n    TransitSources[\"CLIENT\"] = \"client\";\n    /** App server */\n    TransitSources[\"APP\"] = \"app\";\n    /** DeskThing Device */\n    TransitSources[\"DEVICE\"] = \"device\";\n    /** DeskThing Server */\n    TransitSources[\"DESKTHING\"] = \"deskthing\";\n    /** App Client Connector */\n    TransitSources[\"CONCLIENT\"] = \"conclient\";\n    /** App Server Connector */\n    TransitSources[\"CONSERVER\"] = \"conserver\";\n})(TransitSources || (TransitSources = {}));\n/**\n * Naming conventions should go\n *\n * Source2SourcePayload\n * Source2SourceType\n */\n", "/**\n * All data that is sent from the DeskThing Server to the Client\n * @package DeskThingServer + DeskThingClient\n */\nexport var DESKTHING_DEVICE;\n(function (DESKTHING_DEVICE) {\n    /** Will never be emitted to your client. Only exists on device */\n    DESKTHING_DEVICE[\"GLOBAL_SETTINGS\"] = \"global_settings\";\n    /** Will never be emitted to your client. Only exists on device */\n    DESKTHING_DEVICE[\"MAPPINGS\"] = \"button_mappings\";\n    /** Will never be emitted to your client. Only exists on device */\n    DESKTHING_DEVICE[\"CONFIG\"] = \"configuration\";\n    /** Will never be emitted to your client. Only exists on device */\n    DESKTHING_DEVICE[\"GET\"] = \"get\";\n    /** Will never be emitted to your client. Only exists on device */\n    DESKTHING_DEVICE[\"ERROR\"] = \"error\";\n    DESKTHING_DEVICE[\"PONG\"] = \"pong\";\n    DESKTHING_DEVICE[\"PING\"] = \"ping\";\n    DESKTHING_DEVICE[\"SETTINGS\"] = \"settings\";\n    DESKTHING_DEVICE[\"APPS\"] = \"apps\";\n    DESKTHING_DEVICE[\"TIME\"] = \"time\";\n    DESKTHING_DEVICE[\"HEARTBEAT\"] = \"heartbeat\";\n    DESKTHING_DEVICE[\"META_DATA\"] = \"meta_data\";\n    DESKTHING_DEVICE[\"MUSIC\"] = \"music\";\n    DESKTHING_DEVICE[\"ICON\"] = \"icon\";\n})(DESKTHING_DEVICE || (DESKTHING_DEVICE = {}));\n/**\n * Enum representing the different types of events that can be emitted by the DeskThing class.\n * @readonly\n * @since 0.10.4\n * @enum {string}\n */\nexport var DESKTHING_EVENTS;\n(function (DESKTHING_EVENTS) {\n    /**\n     * Sends a notification to the server\n     * Payload should be type {@link NotificationMessage}\n     *\n     * @example\n     * const result = await DeskThing.once({\n     *        type: APP_REQUESTS.MESSAGE,\n     *        request: 'send',\n     *        payload: {\n     *            id: 'myMessage',\n     *            type: \"text\",\n     *            title: 'My Message',\n     *            description: 'This is a message',\n     *            link: 'https://example.com'\n     *        }\n     *    }, { type: APP_REQUESTS.MESSAGE, request: 'myMessage' }\n     * )\n     *\n     * console.log(result.payload.response) // will log the response from the user\n     */\n    DESKTHING_EVENTS[\"MESSAGE\"] = \"message\";\n    /**\n     * Data response from getData()\n     * Triggered whenever data is updated on the server\n     * @remark Does not trigger when settings update. Use {@link DESKTHING_EVENTS.SETTINGS} instead\n     * */\n    DESKTHING_EVENTS[\"DATA\"] = \"data\";\n    /**\n     * The full appDataInterface object\n     * Triggered whenever data is updated on the server\n     * */\n    DESKTHING_EVENTS[\"APPDATA\"] = \"appdata\";\n    /**\n     * Response data from callback functions\n     * Usually from oAuth flows\n     */\n    DESKTHING_EVENTS[\"CALLBACK_DATA\"] = \"callback-data\";\n    /**\n     * Server signals app to start\n     * Triggered when the server initializes the app\n     */\n    DESKTHING_EVENTS[\"START\"] = \"start\";\n    /**\n     * Server signals app to stop\n     * Triggered when the server needs to shutdown the app\n     */\n    DESKTHING_EVENTS[\"STOP\"] = \"stop\";\n    /**\n     * Server signals to purge app data\n     * Triggered when all app data should be deleted\n     */\n    DESKTHING_EVENTS[\"PURGE\"] = \"purge\";\n    /**\n     * User input form response data\n     * Contains data submitted by users through forms\n     */\n    DESKTHING_EVENTS[\"INPUT\"] = \"input\";\n    /**\n     * Response from user action/interaction\n     * Contains data from user-triggered events or interactions\n     * @param data.payload is the triggering {@link Action}. Use the action.id to determine the action\n     */\n    DESKTHING_EVENTS[\"ACTION\"] = \"action\";\n    /**\n     * App configuration data (deprecated)\n     * Legacy configuration system, use SETTINGS instead\n     * @deprecated - Use {@link DESKTHING_EVENTS.SETTINGS} instead\n     */\n    DESKTHING_EVENTS[\"CONFIG\"] = \"config\";\n    /**\n     * App settings data\n     * Contains current application settings and preferences\n     * Can sometimes be partial. So be warned.\n     */\n    DESKTHING_EVENTS[\"SETTINGS\"] = \"settings\";\n    /**\n     * Updated task data. Will be triggered with the task data\n     * Requests include \"update\", \"task\", and \"step\"\n     */\n    DESKTHING_EVENTS[\"TASKS\"] = \"tasks\";\n    /**\n     * Connection data. Will be triggered when a client connects or disconnects\n     * request includes \"connected\", \"disconnected\", \"opened\", \"closed\"\n     */\n    DESKTHING_EVENTS[\"CLIENT_STATUS\"] = \"client_status\";\n})(DESKTHING_EVENTS || (DESKTHING_EVENTS = {}));\n", "/**\n * @deprecated - use {@link EventMode} instead\n */\nexport var EventFlavor;\n(function (EventFlavor) {\n    EventFlavor[EventFlavor[\"KeyUp\"] = 0] = \"KeyUp\";\n    EventFlavor[EventFlavor[\"KeyDown\"] = 1] = \"KeyDown\";\n    EventFlavor[EventFlavor[\"ScrollUp\"] = 2] = \"ScrollUp\";\n    EventFlavor[EventFlavor[\"ScrollDown\"] = 3] = \"ScrollDown\";\n    EventFlavor[EventFlavor[\"ScrollLeft\"] = 4] = \"ScrollLeft\";\n    EventFlavor[EventFlavor[\"ScrollRight\"] = 5] = \"ScrollRight\";\n    EventFlavor[EventFlavor[\"SwipeUp\"] = 6] = \"SwipeUp\";\n    EventFlavor[EventFlavor[\"SwipeDown\"] = 7] = \"SwipeDown\";\n    EventFlavor[EventFlavor[\"SwipeLeft\"] = 8] = \"SwipeLeft\";\n    EventFlavor[EventFlavor[\"SwipeRight\"] = 9] = \"SwipeRight\";\n    EventFlavor[EventFlavor[\"PressShort\"] = 10] = \"PressShort\";\n    EventFlavor[EventFlavor[\"PressLong\"] = 11] = \"PressLong\";\n})(EventFlavor || (EventFlavor = {}));\nexport var EventMode;\n(function (EventMode) {\n    EventMode[EventMode[\"KeyUp\"] = 0] = \"KeyUp\";\n    EventMode[EventMode[\"KeyDown\"] = 1] = \"KeyDown\";\n    EventMode[EventMode[\"ScrollUp\"] = 2] = \"ScrollUp\";\n    EventMode[EventMode[\"ScrollDown\"] = 3] = \"ScrollDown\";\n    EventMode[EventMode[\"ScrollLeft\"] = 4] = \"ScrollLeft\";\n    EventMode[EventMode[\"ScrollRight\"] = 5] = \"ScrollRight\";\n    EventMode[EventMode[\"SwipeUp\"] = 6] = \"SwipeUp\";\n    EventMode[EventMode[\"SwipeDown\"] = 7] = \"SwipeDown\";\n    EventMode[EventMode[\"SwipeLeft\"] = 8] = \"SwipeLeft\";\n    EventMode[EventMode[\"SwipeRight\"] = 9] = \"SwipeRight\";\n    EventMode[EventMode[\"PressShort\"] = 10] = \"PressShort\";\n    EventMode[EventMode[\"PressLong\"] = 11] = \"PressLong\";\n})(EventMode || (EventMode = {}));\n"],
  "mappings": "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",
  "names": ["ClientConnectionMethod", "PlatformIDs", "ClientPlatformIDs", "ConnectionState", "ProviderCapabilities", "ViewMode", "VolMode", "CLIENT_REQUESTS", "DEVICE_CLIENT", "DEVICE_DESKTHING", "PlatformTypes", "TagTypes", "SETTING_TYPES", "STEP_TYPES", "APP_REQUESTS", "LOGGING_LEVELS", "SongAbilities", "AUDIO_REQUESTS", "SongEvent", "TransitSources", "DESKTHING_DEVICE", "DESKTHING_EVENTS", "EventFlavor", "EventMode"]
}
